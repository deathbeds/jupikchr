name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

env:
  PYTHONUNBUFFERED: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  CI: '1'

  # our stuff
  CACHE_EPOCH: '2'

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu]
        python-version: ['3.10']
    defaults:
      run:
        shell: bash -l {0}
    env:
      BUILDING_IN_CI: '1'
    steps:
      - uses: actions/checkout@v3

      # configure builtin providers
      - name: setup (python)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: setup (node)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # restore caches
      - name: cache (pip)
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-build-${{ hashFiles('.github/requirements-build.txt') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-pip-build-

      - name: cache (node)
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: |
            ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-build-${{ hashFiles('yarn.lock') }}

      - name: cache (yarn)
        uses: actions/cache@v3
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        id: cache-yarn-packages
        with:
          path: .yarn-packages
          key: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: setup (pip)
        run: pip install -U pip wheel setuptools

      - name: setup (pip build)
        run: pip install -U -v -r .github/requirements-build.txt

      - name: check (pip)
        run: |
          set -eux
          mkdir -p build/pip
          pip freeze | tee build/pip/dist.pip.freeze
          pip check

      - name: list
        run: doit list --all --status

      - name: build
        run: doit ${{ matrix.DOIT_N_BUILD }} dist || doit dist

      - name: status
        run: doit list --all --status | sort
        if: always()

      - name: Upload (dist)
        uses: actions/upload-artifact@v3
        with:
          name: jupikchr-dist-${{ github.run_number }}
          path: ./dist
